glm(  diagnosis~.,data = B2 )
B_test = testing[ ,c(1,grep('^IL',names(training)))  ]
B2_test <- predict(o,B_test)
o2 <- glm(  diagnosis~.,data = B2 )
o1 <- glm(  diagnosis~.,data = B )
predict( o1, B_test )
?predict
o1
confusionMatrix( predict( o1, B_test ), B_test )
confusionMatrix( predict( o1, B_test ), B_test$diagnosis )
B_test
names(B_test)
names(B2_test)
y1 <- predict( o1, B_test )
y2 <- predict( o2, B2_test )
y1
y2
y2 <- predict( o2, B2_test , type = "class")
y2 <- predict( o2, B2_test , type = class)
y2 <- predict( o2, B2_test , type=class)
y2 <- predict( o2, B2_test , type="class")
y2 <- predict( o2, B2_test , type="response")
y2
y1 <- predict( o1, B_test , type="response")
y1_bin <- y1
y1_bin[y1_bin<0.5]<-0
y1_bin[y1_bin>0.4]<-1
y1_bin
y2_bin <- y2
y2_bin[y2_bin<0.5]<-0
y2_bin[y2_bin>0.4]<-1
confusionMatrix( y2_bin, B2$diagnosis )
B2$diagnosis
confusionMatrix( logical(y2_bin), B2$diagnosis )
confusionMatrix( as.logical(y2_bin), B2$diagnosis )
confusionMatrix( as.logical(y2_bin), B2_test$diagnosis )
len(y2_bin)
length(y2_bin)
length(B2_test$diagnosis)
sum(as.logical(y2_bin)== B2_test$diagnosis )
as.logical(y2_bin)
sum(as.logical(y1_bin)== B_test$diagnosis )
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
head(segmentationOriginal$Case)
X_train <- segmentationOriginal[ segmentationOriginal$Case=='Train', ]
head(X_train$Case)
X_test <- segmentationOriginal[ segmentationOriginal$Case=='Test', ]
set.seed(125)
?train
?=obj <- train(X_train, method="rpart")
?=obj <- train(data=X_train, method="rpart")
?=obj <- train( .~., data=X_train, method="rpart")
?=obj <- train( .~., data = X_train, method = "rpart")
obj <- train( .~., data = X_train, method = "rpart")
obj <- train( data = X_train, method = "rpart")
head(X_train)
obj <- train( Class~.,data = X_train, method = "rpart")
install.packages("e1071")
obj <- train( Class~.,data = X_train, method = "rpart")
new_sample <- X_train[1,:]
new_sample <- X_train[1,]
new_sample
predict(obj,new_sample)
new_sample[ , ] = -1
new_sample
new_sample[ , ] = 'NA'
new_sample[ , ] = 'NA'
new_sample[ , ]
new_sample[ , ]+!
)
new_sample[ , ]+1
new_sample[ 1, 1]+1
new_sample[ 1, 1]
class(new_sample[ 1, 1])
1/0
Na
NA
new_sample[ , ] = NA
new_Sample
new_sample
new_sample+1
new_sample$TotalIntench2 = 23,000
new_sample$TotalIntench2 = 23000
new_sample$FiberWidthCh1 = 10
new_sample$PerimStatusCh1=2
new_sample
predict(obj,new_sample)
new_sample[1]
new_sample[2]
new_sample[2] <- X_train[2,1]
predict(obj,new_sample)
?predict
new_sample <- X_train[1,]
new_sample$TotalIntench2 = 23,000
new_sample$TotalIntench2 = 23000
new_sample$FiberWidthCh1 = 10
new_sample$PerimStatusCh1=2
predict(obj,new_sample)
sum( X_test$TotalIntench2 == 23000 )
new_sample[ , ] = NA
new_sample$TotalIntench2 = 23000
new_sample$PerimStatusCh1=2
new_sample$FiberWidthCh1 = 10
class(X_train)
X2 <- rbind( new_sample, X_train )
X2 <- cbind( new_sample, X_train )
X2 <- rbind( new_sample, X_train )
new_sample <- X_train[1,]
new_sample$PerimStatusCh1=2
new_sample$FiberWidthCh1 = 10
new_sample$TotalIntench2 = 23000
names(X_train)
X_train$TotalIntenStatusCh2[1]
X_train$TotalIntenStatusCh2[2]
X_train$TotalIntenStatusCh2[3]
X_train$TotalIntenStatusCh2[4]
a
a$i<-1
a<-data.frame()
a$TotalIntench2 <- 23000
a$TotalIntench2 = 23000
dataf.frame(c(1,23))
data.frame(c(1,23))
data.frame(c(1,23), names=c("1","2"))
)
data.frame(1,23)
a <- data.frame(1,23)
a
names(a) <- c("x","y")
a
a <- data.frame(23000,10,2)
names(a) <- c("TotalIntench2","FiberWidthCh1", "PerimStatusCh1")
a
predict(obj, a)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
obj1 <- train( Area~., data=olive )
obj1 <- train( Area~., data=olive )
predict(obj1, new_data)
newdata = as.data.frame(t(colMeans(olive)))
predict(obj1, newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
installed.packages("ElemStatLearn")
installed.packages("ElemStatLearn")
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
obj3 <- train( chd~.,data=trainSA, method="glm", family="binomial")
obj3 <- train( factor(chd)~.,data=trainSA, method="glm", family="binomial")
head( trainSA
)
obj3 <- train( factor(chd)~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA, method="glm", family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
pred <- prediction(obj3,testSA)
pred <- predict(obj3,testSA)
pred
missClass( testSA$chd, pred )
missClass( as.int(testSA$chd), pred )
pred[1]
as.int(pred[1])
int(pred[1])
as.numeric(pred[1])
as.numeric(pred[2])
as.numeric(pred[3])
missClass( as.numeric(testSA$chd), as.numeric(pred) )
as.numeric(testSA$chd)
as.numeric(pred)
missClass( as.numeric(testSA$chd), as.numeric(pred)-1 )
pred_t <- predict(obj3,trainSA)
missClass( as.numeric(trainSA$chd), as.numeric(pred_T)-1 )
missClass( as.numeric(trainSA$chd), as.numeric(pred_t)-1 )
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
set.seed( 33833 )
obj <- train( factor(y)~.,data = vowel.train, method = "rpart")
varImp(obj)
?varImp
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
obj1 <- train(  data=vowl.tra'')
obj1 <- train( factor(y)~., data=vowel.train, method = "rpart")
obj2 <- train( factor(y)~., data=vowel.train, method = "gbm")
obj2 <- train( factor(y)~., data=vowel.train, method = "gbm")
pred_1 <- predict(obj1,vowel.test)
pred_2 <- predict(obj2,vowel.test)
missClass( as.numeric(trainSA$chd), as.numeric(pred_T)-1 )
missClass( as.numeric(pred_1), as.numeric(vowel.test$y)-1 )
as.numeric(vowel.test$y)-1
as.numeric(pred_1)
sum( pred_1 ==vowel.test$y )
pred_1
vowel.test$y
sum( pred_1 ==vowel.test$y ) / length( pred_! )
sum( pred_1 ==vowel.test$y ) / length( pred_1 )
sum( pred_1 ==vowel.test$y ) / length( pred_2 )
sum( pred_2 ==vowel.test$y ) / length( pred_2 )
sum( factor(pred_1) ==vowel.test$y )
sum( factor(pred_1) ==vowel.test$y ) / length( pred_2 )
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
obj1 <- train( factor(y)~., data=vowel.train, method = "rf")
pred_1 <- predict(obj1,vowel.test)
sum( factor(pred_1) ==vowel.test$y ) / length( pred_2 )
sum( factor(pred_1) ==factor(vowel.test$y) ) / length( pred_2 )
obj1 <- train( diagnosis~., data=vowel.train, method = "rf")
obj1 <- train( diagnosis~., data=training, method = "rf")
obj2 <- train( diagnosis~., data=training, method = "gbm")
obj3 <- train( diagnosis~., data=training, method = "lda")
pred_1 <- predict(obj1,testing)
pred_2 <- predict(obj2,testing)
pred_3 <- predict(obj3,testing)
pred_all <- data.frame( pred_1, pred_2, pred_3 )
pred_all
sum( pred_1==testing$diagnosis )
sum( pred_2==testing$diagnosis )
sum( pred_3==testing$diagnosis )
sum( pred_3==testing$diagnosis ) / length(pred_1)
sum( pred_2==testing$diagnosis ) / length(pred_1)
pred_all <- data.frame( pred_1, pred_2, pred_3 )
pred_1_train <- predict(obj1,training)
pred_2_train <- predict(obj2,training)
pred_2_train <- predict(obj3,training)
pred_2_train <- predict(obj2,training)
pred_3_train <- predict(obj3,training)
X_new <- data.frame( training$diagnosis, pred_1_train, pred_2_train, pred_3_train )
obj_S <- train( diagnosis~., data=X_new, method = "rf")
X_new
obj_S <- train( training.diagnosis~., data=X_new, method = "rf")
X_new_test <- data.frame( pred_1, pred_2, pred_3 )
pred_A <- predict(obj_S,X_new_test)
X_new_test
pred_A <- predict(obj_S,X_new_test)
pred_A
sum(pred_A == testing.diagnosis)
sum(pred_A == testing$diagnosis)
length(pred_A)
length(testing$diagnosis)
length(X_new_test[,1])
pred_A <- predict(obj_S,X_new_test, newdata=T)
?predict
pred_S <- predict(obj_S,X_new_test)
names(X_new)
names(X_new_test)
names(X_new_test) <- c("pred_1_train" ,"pred_2_train" ,"pred_3_train" )
pred_S <- predict(obj_S,X_new_test)
sum(pred_A == testing$diagnosis)
length(pred_S)
sum(pred_S == testing$diagnosis)
sum(pred_S == testing$diagnosis)/length(pred_S)
X_new_test <- data.frame( testing.diagnosis, pred_1, pred_2, pred_3 )
X_new_test <- data.frame( testing$diagnosis, pred_1, pred_2, pred_3 )
obj_S <- train( testing.diagnosis~., data=X_new_test, method = "rf")
pred_S <- predict(obj_S,X_new_test)
sum(pred_S == testing$diagnosis)/length(pred_S)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
?plot.enet)
?plot.enet
??plot.enet
head(training)
a <- train(data=training, CompressiveStrength~., method='lasso')
a <- train(data=training, CompressiveStrength~., method='lasso')
?plot.enet
class(a)
plot(a)
?plot.enet
plot(a, use.color=T)
?plot.enet
plot(a, xvar="fraction",use.color=T)
?plot.enet
plot(a, xvar="penalty",use.color=T)
?plot.enet
plot(a, xvar="L1norm",use.color=T)
?plot.enet
plot(a, xvar="L1norm",use.color=T)
?plot.enet
a
names(a)
plot(a, xvar="L1norm",use.color=T)
a$xleveles
a$bestTune
a$finalModel
library(lubridate)
install.packages(lubridate)
install.packages(lubridate)
install.packages("lubridate")
library(lubridate)
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?bats
install.packages("forecast")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
install.packages("e1071")
install.packages("e1071")
svm
a <- train(data=training, CompressiveStrength~., method='svm')
a <- svm(data=training, CompressiveStrength~.)
svm.model <- svm(data=training, CompressiveStrength~.)
library(e1071)
svm.model <- svm(data=training, CompressiveStrength~.)
svm.model <- svm(data=training, CompressiveStrength~.)
p <- predict( svm.model, testing )
mean((p-testing$CompressiveStrength)^2)
sqrt( mean((p-testing$CompressiveStrength)^2) )
ls
ls()
setwd('/home/milchevski/Desktop/pyt/R_machine_learning')
dir
dir()
setwd('/home/milchevski/Desktop/pyt/R_ML/R_ML')
dir()
?read.csv
X_train <- read.csv( "pml-training.csv", header = TRUE )
head(X_train)
a < sum(X_train)
a <- sum(X_train)
class(X_train'')
class(X_train)
complete.cases(X_train)
head(X_train)
?complete.cases
aa <- is.na(X_train)
colnames(X_train)[colSums(is.na(mymatrix)) > 0]
colnames(X_train)[colSums(is.na(X_train)) > 0]
X_test <- read.csv( "pml-testing.csv", header = TRUE )
colnames(X_train)[colSums(is.na(X_train)) > 0]
colnames(X_test)[colSums(is.na(X_test)) > 0]
colnames(X_train)[colSums(is.na(X_train)) > 0 * colSums(is.na(X_test)) > 0]
colnames(X_train)[(colSums(is.na(X_train)) > 0) * (colSums(is.na(X_test)) > 0)]
colnames(X_train)[(colSums(is.na(X_train)) > 0) and (colSums(is.na(X_test)) > 0)]
colnames(X_train)[(colSums(is.na(X_train)) > 0) & (colSums(is.na(X_test)) > 0)]
col_names <- colnames(X_train)[(colSums(is.na(X_train)) > 0) & (colSums(is.na(X_test)) > 0)]
A <- X_test[,col_names]
X_test <- X_test[,col_names]
X_train <- X_train[,col_names]
col_names
class(col_names)
col_names
names( X_train )
X_train <- read.csv( "pml-training.csv", header = TRUE )
X_test <- read.csv( "pml-testing.csv", header = TRUE )
col_names <- colnames(X_train)[(colSums(is.na(X_train)) > 0) & (colSums(is.na(X_test)) > 0)]
names(X_train)
col_names
col_names <- c(col_names, "classe")
col_names
X_train <- complete.cases(X_train)
X_train <- read.csv( "pml-training.csv", header = TRUE )
X_test <- read.csv( "pml-testing.csv", header = TRUE )
col_names <- colnames(X_train)[(colSums(is.na(X_train)) > 0) & (colSums(is.na(X_test)) > 0)]
col_names <- c(col_names, "classe")
X_test <- X_test[,col_names]
X_train <- X_train[,col_names]
col_names
names(X_train)
X_train <- read.csv( "pml-training.csv", header = TRUE )
X_test <- read.csv( "pml-testing.csv", header = TRUE )
col_names <- colnames(X_train)[(colSums(is.na(X_train)) > 0) & (colSums(is.na(X_test)) > 0)]
names(X_train)
col_names <- c(col_names, "classe")
col_names
X_test <- X_test[,col_names]
col_names <- colnames(X_train)[(colSums(is.na(X_train)) > 0) & (colSums(is.na(X_test)) > 0)]
X_train <- X_train[,col_names]
names(X_train)
nams <- names(X_train)
X_train <- read.csv( "pml-training.csv", header = TRUE )
X_test <- read.csv( "pml-testing.csv", header = TRUE )
col_names <- colnames(X_train)[(colSums(is.na(X_train)) > 0) & (colSums(is.na(X_test)) > 0)]
nams
X_train <- read.csv( "pml-training.csv", header = TRUE )
X_test <- read.csv( "pml-testing.csv", header = TRUE )
col_names <- colnames(X_train)[(colSums(is.na(X_train)) > 0) & (colSums(is.na(X_test)) > 0)]
nams <- names(X_train)
nams
nams[160]
col_names <- c(col_names, nams[160])
X_test <- X_test[,col_names]
X_test
head(X_test)
X_train <- X_train[,col_names]
X_test <- read.csv( "pml-testing.csv", header = TRUE )
names(X_test)
X_train <- read.csv( "pml-training.csv", header = TRUE )
X_test <- read.csv( "pml-testing.csv", header = TRUE )
names(X_train)
names(X_test)
X_test$problem_id
X_train <- read.csv( "pml-training.csv", header = TRUE )
X_test <- read.csv( "pml-testing.csv", header = TRUE )
col_names <- colnames(X_train)[(colSums(is.na(X_train)) > 0) & (colSums(is.na(X_test)) > 0)]
nams <- names(X_train)
X_train <- X_train[,c(col_names, "classe")]
X_test <- X_test[,col_names]
X_train <- X_train[complete.cases(X_train)]
X_train <- X_train[complete.cases(X_train),]
X_train <- read.csv( "pml-training.csv", header = TRUE )
X_test <- read.csv( "pml-testing.csv", header = TRUE )
col_names <- colnames(X_train)[(colSums(is.na(X_train)) > 0) & (colSums(is.na(X_test)) > 0)]
X_test <- X_test[,col_names]
X_train <- X_train[,c(col_names, "classe")]
X_train <- read.csv( "pml-training.csv", header = TRUE )
X_test <- read.csv( "pml-testing.csv", header = TRUE )
col_names <- colnames(X_train)[(colSums(is.na(X_train)) == 0) & (colSums(is.na(X_test)) == 0)]
X_test <- X_test[,col_names]
X_train <- X_train[,c(col_names, "classe")]
X_train <- read.csv( "pml-training.csv", header = TRUE )
X_test <- read.csv( "pml-testing.csv", header = TRUE )
col_names <- colnames(X_train)[(colSums(is.na(X_train)) == 0) & (colSums(is.na(X_test)) == 0)]
col_names
X_test <- X_test[,col_names(col_names!="classe")]
X_test <- X_test[,col_names[col_names!="classe"] ]
X_train <- read.csv( "pml-training.csv", header = TRUE )
X_test <- read.csv( "pml-testing.csv", header = TRUE )
col_names <- colnames(X_train)[(colSums(is.na(X_train)) == 0) & (colSums(is.na(X_test)) == 0)]
X_test <- X_test[,col_names[col_names!="classe"] ]
X_train <- X_train[, col_names]
X_train <- X_train[complete.cases(X_train)]
X_train <- X_train[complete.cases(X_train),]
inTrain <- createDataPartition(y=X_train$classe, p=0.7, list=FALSE)
library(caret)
inTrain <- createDataPartition(y=X_train$classe, p=0.7, list=FALSE)
X_train <- read.csv( "pml-training.csv", header = TRUE )
X_test <- read.csv( "pml-testing.csv", header = TRUE )
col_names <- colnames(X_train)[(colSums(is.na(X_train)) == 0) & (colSums(is.na(X_test)) == 0)]
X_test <- X_test[,col_names[col_names!="classe"] ]
X_train <- X_train[, col_names]
library(caret)
inTrain <- createDataPartition(y=X_train$classe, p=0.7, list=FALSE)
X_train <- X_train[ inTrain, ]
X_train <- X_cross[ -inTrain, ]
X_train <- read.csv( "pml-training.csv", header = TRUE )
X_test <- read.csv( "pml-testing.csv", header = TRUE )
col_names <- colnames(X_train)[(colSums(is.na(X_train)) == 0) & (colSums(is.na(X_test)) == 0)]
X_test <- X_test[,col_names[col_names!="classe"] ]
X_train <- X_train[, col_names]
library(caret)
inTrain <- createDataPartition(y=X_train$classe, p=0.7, list=FALSE)
X_train <- X_train[ inTrain, ]
X_cross <- X_train[ -inTrain, ]
X_cross$classe
obj1 <- train( class~., data=X_train, method= "rf")
obj1 <- train( classe~., data=X_train, method= "rf")
dir()
X_train <- read.csv( "pml-training.csv", header = TRUE )
X_test <- read.csv( "pml-testing.csv", header = TRUE )
col_names <- colnames(X_train)[(colSums(is.na(X_train)) == 0) & (colSums(is.na(X_test)) == 0)]
X_test <- X_test[,col_names[col_names!="classe"] ]
X_train <- X_train[, col_names]
library(caret)
inTrain <- createDataPartition(y=X_train$classe, p=0.7, list=FALSE)
?createDataPartition
aa <- createFolds(y=X_train$classe, k=3, list=FALSE)
aa
X_train <- X_train[ inTrain, ]
X_cross <- X_train[ -inTrain, ]
folds <- createFolds(y=X_train$classe, k=3, list=FALSE)
X_train1 <- X_train[ folds==1, ]
X_train2 <- X_train[ folds==2, ]
X_train3 <- X_train[ folds==3, ]
obj1 <- train( classe~., data=X_train1, method= "rf")
obj2 <- train( classe~., data=X_train2, method= "lda")
warnings()
pred_1 <- predict(obj1,X_cross)
pred_2 <- predict(obj2,X_cross)
pred_3 <- predict(obj3,X_cross)
obj3 <- train( classe~., data=X_train3, method= "bayesglm")
obj3 <- train( classe~., data=X_train3, method= "bayesglm")
obj3 <- train( classe~., data=X_train3, method= "AdaBoost.M1")
